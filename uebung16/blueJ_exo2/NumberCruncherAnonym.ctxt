#BlueJ class context
comment0.target=NumberCruncherAnonym
comment0.text=\r\n\ NumberCruncherAnonym\r\n\ \r\n\ @author\ A.\ Venet\ u.\ H.\ Schall\r\n\ @version\ 1.0\r\n
comment1.params=values
comment1.target=NumberCruncherAnonym(float[])
comment1.text=\r\n\ Konstruktor\r\n\ @param\ values\ Array,\ auf\ dem\ operiert\ werden\ soll\r\n
comment10.params=
comment10.target=float[]\ getNumbers()
comment10.text=\r\n\ Methode\ getNumbers\r\n\r\n\ @return\ gibt\ das\ float-Array\ zurueck\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\r\n\ Methode\ toString\r\n\ @return\ informiert\ ueber\ die\ Klasse\ NumberCruncherAnonym\r\n
comment2.params=operations
comment2.target=void\ crunch(java.lang.String[])
comment2.text=\r\n\ Methode\ crunch\r\n\ fuehrt\ die\ Operationen\ aus\r\n\r\n\ @param\ operations\ String-Array,\ in\ dem\ alle\ Operationen,\ \r\n\ \ \ \ \ \ die\ nacheinander\ ausgefuehrt\ werden\ sollen,\ stehen\r\n
comment3.params=values
comment3.target=void\ crunch(float[])
comment4.params=highestIndex
comment4.target=int\ randomPos(int)
comment5.params=values
comment5.target=void\ crunch(float[])
comment6.params=tab\ ind
comment6.target=float[]\ insertionSort(float[],\ int[])
comment7.params=values
comment7.target=void\ crunch(float[])
comment8.params=values
comment8.target=void\ crunch(float[])
comment9.params=values
comment9.target=void\ crunch(float[])
numComments=12
